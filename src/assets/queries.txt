Category: Queries
Q) Queries

A) Queries

Sql joins::

An SQL JOIN clause is used to combine rows from two or more tables, based on a common field between them.

INNER JOIN: Returns all rows when there is at least one match in BOTH tables

LEFT JOIN: Return all rows from the left table, and the matched rows from the right table

RIGHT JOIN: Return all rows from the right table, and the matched rows from the left table

FULL JOIN: Return all rows when there is a match in ONE of the tables

SQL INNER JOIN Syntax::

SELECT column_name(s)

FROM table1

INNER JOIN table2

ON table1.column_name=table2.column_name;

Example::

SELECT Customers.CustomerName, Orders.OrderID

FROM Customers

INNER JOIN Orders

ON Customers.CustomerID=Orders.CustomerID

ORDER BY Customers.CustomerName;



self join::

hint :Emp_name ni 2 tables(e1,e2) lo tesukuntamu.ofter join 2 tables ofter id=mgrid aunthe.

normal table::



Emp_id Emp_name Manager_id



1 rajesh 3



2 suresh 1



3 ratna 2



syntax::

select e1.columnname as dummyname,e2.columnname as dummy name(like mgr)

from tablename e1

inner join tablename e2 on e1.columnname= e2.columnname



Updatequery



Update::

UPDATE table_name

SET column1=value1,column2=value2,...

WHERE some_column=some_value;

Example::

UPDATE Customers

SET ContactName='Alfred Schmidt', City='Frankfurt'

WHERE CustomerID=1;

Maxsalary


Write an SQL query to get third maximum salary of an employee from a table named employee_table.

SELECT TOP 1 salary

FROM (

SELECT TOP 3 salary

FROM employee_table

ORDER BY salary DESC ) AS emp

ORDER BY salary ASC;



Selfjoin



self join::

hint :Emp_name ni 2 tables(e1,e2) lo tesukuntamu.ofter join 2 tables ofter id=mgrid aunthe.

normal table::



Emp_id Emp_name Manager_id



1 rajesh 3



2 suresh 1



3 ratna 2



syntax::

select e1.columnname as dummyname,e2.columnname as dummy name(like mgr)

from tablename e1

inner join tablename e2 on e1.columnname= e2.columnname



select e1.Emp_name as Employee_Name,e2.Emp_name as Manager_Name

from f14.employee e1

inner join f14.employee e2

on e1.Manager_id = e2.Emp_Id;

result is ::

Employee_Name Manager_Name



suresh rajesh



ratna suresh



rajesh ratna



ref::https://www.youtube.com/watch?v=e6QrrN1AePs#t=582.591245

Maxsalary



second highest salary find.

syntax::select MAx(columnname) from tablename where tablename<(select Max(columnname)from tablename)

SELECT MAX(salary)

From sbi.salary WHERE salary < ( SELECT Max(salary) FROM sbi.salary);

example 3:

select * from Emp e1 where 2=(select count(sal)from emp e2 where e2.sal>e1.sal)

Joins

joins vese tapudu input enti output enti ani think cheyali ok na.

SELECT r.name from f14.user u

inner join f14.user_roles ur on u.id = ur.uid

inner join f14.role r on r.id=ur.rid

where u.username='user1' and password='slokam';

output::

name



ROLE_MANAGER

ROLE_ADMIN





SELECT f14.u.username from user u

inner join user_roles ur on u.id=ur.uid

inner join role r on r.id = ur.rid where r.name ='ROLE_ADMIN'

output::

username



user1
~~~~~~~~~~~~~~
Q)how to Optimize Database Queries
A)
a. Use Proper Indexing
Ensure that the database tables have appropriate indexes on columns that are frequently queried.
Use composite indexes for queries involving multiple columns.
b. Optimize Queries
Avoid using SELECT *, instead, specify the required columns.
Use joins efficiently and avoid unnecessary joins.
Use pagination for large result sets to avoid fetching too much data at once.
c. Batch Processing
Use batch operations for insert, update, or delete operations to reduce the number of database calls.
d. Avoid N+1 Query Problem
Use JOIN FETCH in JPQL or the @EntityGraph annotation to fetch related entities in a single query.
Use appropriate fetching strategies (lazy/eager) based on the use case.
2. Spring Boot Configuration
a. Database Connection Pooling
Use a connection pool like HikariCP (default in Spring Boot) to manage database connections efficiently.
Configure the connection pool properties (e.g., max pool size, idle timeout).
yaml
Copy code
spring:
  datasource:
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 600000
      max-lifetime: 1800000
      connection-timeout: 30000
b. Second-Level Cache
Enable second-level cache for frequently accessed entities to reduce database load.
Configure a caching provider like EhCache or Hazelcast.
yaml
Copy code
spring:
  jpa:
    properties:
      hibernate:
        cache:
          use_second_level_cache: true
          region:
            factory_class: org.hibernate.cache.jcache.JCacheRegionFactory
        jcache:
          provider: org.ehcache.jsr107.EhcacheCachingProvider
3. Code Optimization
a. Use Efficient Data Access Patterns
Use the Spring Data JPA repository methods and custom queries efficiently.
Utilize @Query annotations for complex queries.
b. Transaction Management
Use transactions efficiently to ensure data consistency and reduce locking.
Use read-only transactions for queries that do not modify data.
java
Copy code
@Service
public class MyService {

    @Transactional(readOnly = true)
    public List<MyEntity> findEntities() {
        return myEntityRepository.findAll();
    }

    @Transactional
    public void saveEntity(MyEntity entity) {
        myEntityRepository.save(entity);
    }
}
4. Monitor and Profile
a. Enable SQL Logging
Enable SQL logging to monitor and analyze the generated queries.
yaml
Copy code
spring:
  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: true
b. Use Profiling Tools
Use tools like Spring Boot Actuator, YourKit, or VisualVM to profile the application and identify bottlenecks.
c. Database Monitoring
Use database monitoring tools to analyze query performance and database health (e.g., MySQL Workbench, pgAdmin).
Example: Combining These Techniques
Here's a concrete example of a service method that utilizes some of the techniques mentioned:

java
Copy code
@Service
public class EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    @Transactional(readOnly = true)
    public Page<Employee> getEmployees(int page, int size) {
        Pageable pageable = PageRequest.of(page, size, Sort.by("salary").descending());
        return employeeRepository.findAll(pageable);
    }

    @Transactional
    public void batchUpdateSalaries(List<Employee> employees) {
        employeeRepository.saveAll(employees);
    }
}

@Repository
public interface EmployeeRepository extends JpaRepository<Employee, Long> {

    @EntityGraph(attributePaths = {"department"})
    List<Employee> findByDepartmentId(Long departmentId);
}
Summary
By implementing these strategies, you can optimize your database queries and improve the overall performance of your Spring Boot application. Regular monitoring and profiling are crucial to continuously identify and address performance bottlenecks.

~~~~~~~~~